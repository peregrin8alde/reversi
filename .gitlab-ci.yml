# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# https://docs.gitlab.com/ee/ci/yaml/#default
default:
  image: bash
variables:
  TARGETDIR: "${CI_PROJECT_DIR}/_build"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - prepare
  - release

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - bash src/build_tool/setup_default.sh
  script:
    - make compile
  artifacts:
    untracked: true
    paths:
      - _build/

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  before_script:
    - bash src/build_tool/setup_default.sh
    - bash src/build_tool/setup_test.sh
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    # artifacts を展開後にソースがダウンロードされるため、ターゲットの更新日時を新しくしないとリビルドされてしまう
    - make -t compile
    - make test
    - echo "Code coverage is 90%"
  artifacts:
    reports:
      junit: ${TARGETDIR}/report/**/*.xml

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."


# リリースの自動生成
## artifacts は期限切れがあるので、リリース向けには汎用パッケージリポジトリを使う
## 毎回実施するのではなく、タグ作成に合わせて実施
## （リリース可能という意味では main へのマージで実施したいところだが、 main へのマージが落ち着くまでは手動タグ生成に合わせる）
## 参考 : 
##   - https://forum.gitlab.com/t/add-a-specific-file-of-a-project-into-the-release-gitlab/82124/3
##   - https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-generic-package-by-using-cicd
##   - https://docs.gitlab.com/ee/user/project/releases/release_cicd_examples.html
prepare_job:
  stage: prepare
  rules:
    - if: $CI_COMMIT_TAG
  script:
    #- TAG=v$(cat VERSION)
    - TAG=$CI_COMMIT_TAG
    - echo "EXTRA_DESCRIPTION=some message" >> variables.env
    - echo "TAG=${TAG}" >> variables.env
    - tar zcvf release.tar.gz _build/
    - apk add --no-cache curl
    - |
      curl --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file release.tar.gz \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/my_package/${TAG}/release.tar.gz"
  artifacts:
    reports:
      dotenv: variables.env

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job for $TAG"
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli $EXTRA_DESCRIPTION'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'
    assets:
      links:
        - name: 'release.tar.gz'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/my_package/${TAG}/release.tar.gz'
